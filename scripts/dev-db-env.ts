import { existsSync as exists } from "node:fs"
import { readFile, writeFile, rm, stat } from "node:fs/promises"
import { join } from "node:path"
import { fileURLToPath } from "node:url"

// -----   Config   -----
const envFileName = ".env.local"
// ----- / Config   -----

const __dirname = fileURLToPath(new URL(".", import.meta.url))
const autoGeneratedStartSign = "### ___AUTO_GENERATED_START___ ###"
const autoGeneratedEndSign = "### ___AUTO_GENERATED_END___ ###"
const envFilePath = join(__dirname, `../${envFileName}`)
const envJsonPath = join(__dirname, "../supabase-env.tmp.json")
const envJsonStr = await readFile(envJsonPath)

const { API_URL, ANON_KEY, SERVICE_ROLE_KEY } = JSON.parse(
  envJsonStr.toString(),
)
const supabaseEnvVars = `${autoGeneratedStartSign}
PUBLIC_SUPABASE_URL='${API_URL}'
PUBLIC_SUPABASE_ANON_KEY='${ANON_KEY}'
PRIVATE_SUPABASE_SERVICE_ROLE='${SERVICE_ROLE_KEY}'
${autoGeneratedEndSign}
`

if (exists(envFilePath)) {
  const dotEnvStat = await stat(envFilePath)

  // if .env exists and it is a file
  if (dotEnvStat.isFile()) {
    const existingEnv = (await readFile(envFilePath)).toString()

    let isAutoGeneratedLine = false
    const otherEnvVars =
      existingEnv
        .split("\n")
        .map((line) => {
          const trimmedLine = line.trim()

          if (trimmedLine.startsWith(autoGeneratedStartSign)) {
            isAutoGeneratedLine = true
            return undefined
          }

          if (trimmedLine.startsWith(autoGeneratedEndSign)) {
            isAutoGeneratedLine = false
            return undefined
          }

          return isAutoGeneratedLine === false ? line : undefined
        })
        .filter((line) => !!line)
        .join("\n") + "\n\n"

    await writeFile(envFilePath, otherEnvVars + supabaseEnvVars)
  } // if .env exists but it is NOT a file (e.g. directory)
  else {
    throw new Error(`${envFileName} already exists and it is not a text file. Remove or replace it with a text file so that Supabase CLI can write local database configs to it.`)
  }
}
// if .env does not exist
else {
  await writeFile(envFilePath, supabaseEnvVars, { flag: "w+" })
}

await rm(envJsonPath, { force: true })
